    // // присвоение
    // {
    //     let _x = 255; // связывание имен
    //     let (_a, _b) = (2, 12); // шаблон
    //     let _a_not_mut = 5;
    //     // a_not_mut = 12; oшибка a_not_mut без слова mut не может быть переприсвоена
    //     let mut _a_mut = 19; // оператор обьявления
    //     _a_mut = 22;
    // }
    // // функции
    // {
    //     fn _print_number(num: i32) {
    //         println!("{}", num);
    //     }
    //     fn _ge_sum(first_num: i32, secont_num: i32) {
    //         first_num + secont_num;
    //     }

    //     fn _return_before_end(i_num: i32) -> i32 {
    //         if i_num < 10 {
    //             return 12;
    //         }
    //         i_num + 12
    //     }
    //     // функции которые имеют тип (выглядит весьма странно)
    //     fn _foo(a: i32) -> i32 {
    //         a + 10
    //     }
    //     let _x_fn: fn(i32) -> i32 = _foo;
    //     println!("{} {} ", _x_fn(30), _foo(30));
    // }
    // // расходящиеся функци - функции которые не возвращают управление в основной поток
    // {
    //     fn _pani_fn() -> ! {
    //         panic!("This fuction throw an exeption as NODEJS");
    //     }
    // }
    // // примитивы
    // {
    //     // булевые значения  логические значения
    //     let _b: bool = true;
    //     let _a: bool = false;
    //     // символы в одинарных кавычках ! представлены четырьмя байтами а не одним как в других языках програмирования
    //     let _c: char = 'c';
    //     // масивы
    //     let mut _arr: [i32; 3] = [1, 2, 3];
    //     let _arr_auto = [5; 12]; // [5,5,5,5,5,5,5,5,5,5,5,5]
    //     let _arr_len = _arr.len(); // метод len длина масива

    //     // срезы масивов являются ссылками на оригинальные елементы масив
    //     let _slice_arr = &_arr[1..]; // делает срез начиная со второго елемента масива и до конца
    // }
    // // кортежи - последовательности фиксированого размера ! (tuple)
    // {
    //     let _a = (1, 'c', "Hello");
    //     // индексация кортежей через точку по индексу
    //     let _b = _a.0;
    // }
    // // условия if
    // {
    //     if 10 < 11 {
    //         print!("Something strange");
    //     } else {
    //         print!("i dont know");
    //     }
    //     // привязка имен через if
    //     let _a = if 10 < 11 { 11 } else { 12 };
    // }
    // // циклы loop , while , for
    // // loop - бесконечный цикл
    // // while - пока условие верно
    // // for по количеству итераций (итерируемых елементов)
    // {
    //     let mut _a = 0;
    //     loop {
    //         _a += 1;
    //         if _a == 15 {
    //             break;
    //         }
    //     }

    //     while _a > 0 {
    //         _a -= 1;
    //     }

    //     _a = 10;
    //     for i in 0.._a {
    //         println!("{} iteration ", i)
    //     }
    //     // enumerate() - для отслеживания количества итераций
    // }