// 1 байт - 8 бит
// 1 бит самая маленькая единица исчислении информации может быть или 0 или 1

fn main() {
    // присвоение
    {
        let _x = 255; // связывание имен
        let (_a, _b) = (2, 12); // шаблон
        let _a_not_mut = 5;
        // a_not_mut = 12; oшибка a_not_mut без слова mut не может быть переприсвоена
        let mut _a_mut = 19; // оператор обьявления
        _a_mut = 22;
    }
    // функции
    {
        fn _print_number(num: i32) {
            println!("{}", num);
        }
        fn _ge_sum(first_num: i32, secont_num: i32) {
            first_num + secont_num;
        }

        fn _return_before_end(i_num: i32) -> i32 {
            if i_num < 10 {
                return 12;
            }
            i_num + 12
        }
    }
    // расходящиеся функци - функции которые не возвращают управление в основной поток
    {
        fn _pani_fn() -> ! {
            panic!("This fuction throw an exeption as NODEJS");
        }
    }
    // примитивы
    {
        // булевые значения  логические значения
        let _b: bool = true;
        let _a: bool = false;
        // символы в одинарных кавычках ! представлены четырьмя байтами а не одним как в других языках програмирования
        let _c: char = 'c';
        // масивы
        let mut _arr: [i32; 3] = [1, 2, 3];
        let _arr_auto = [5; 12]; // [5,5,5,5,5,5,5,5,5,5,5,5]
        let _arr_len = _arr.len(); // метод len длина масива

        // срезы масивов являются ссылками на оригинальные елементы масив
        let _slice_arr = &_arr[1..]; // делает срез начиная со второго елемента масива и до конца

    }
}
